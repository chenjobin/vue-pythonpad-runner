__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1599096373598, "gradepad.grader": [".py", "import sys\n\n\nclass Test:\n def __init__(self,grader,desc,fail_msg):\n  self.grader=grader\n  self.desc=desc\n  self.fail_msg=fail_msg\n  self.failed=False\n  \n def fail(self):\n  self.failed=True\n  \n def expect(self,value):\n  if not value:\n   self.fail()\n   \n def print_error(self,msg):\n  sys.stderr.write(str(msg)+'\\n')\n  \n def print_result(self,error=False ):\n  if self.failed:\n   self.print_error('- (X) %s'%self.desc)\n   if self.fail_msg:\n    self.print_error('** %s'%self.fail_msg)\n  else :\n   if error:\n    self.print_error('- (?) %s'%self.desc)\n   else :\n    print('- (O) %s'%self.desc)\n    \n    \nclass Grader:\n def __init__(self,pass_msg=None ):\n  print('Grading...')\n  self.pass_msg=pass_msg\n  self.failed=False\n  self.tests=[]\n  \n def test(self,desc,fail_msg=None ):\n  test=Test(self,desc,fail_msg)\n  self.tests.append(test)\n  return test\n  \n def save_passed_state(self):\n  f=open('.passed.json','w')\n  f.close()\n  \n def print_error(self,msg):\n  sys.stderr.write(str(msg)+'\\n')\n  \n def done(self):\n  test_count=len(self.tests)\n  pass_count=len([1 for t in self.tests if not t.failed])\n  for test in self.tests:\n   test.print_result(error=self.failed)\n   \n  print()\n  if self.failed:\n   self.print_error('Failed to finish the grading. \\nPlease fix your code and try again!')\n  elif test_count ==pass_count:\n   if self.pass_msg:\n    print(self.pass_msg)\n   else :\n    print('Everything is in place! Well done!')\n   self.save_passed_state()\n  else :\n   self.print_error('Passed %d/%d tests. Please try again!'%(pass_count,test_count))\n   \n def fail(self):\n  self.failed=True\n  \n def run(self,grade):\n  try :\n   grade(self)\n  except Exception as e:\n   self.print_error('An error has occurred in your code while grading. Failed to grade the code.')\n   raise e\n  self.done()\n", ["sys"]], "gradepad": [".py", "from .stdout_collector import StdoutCollector\nfrom .grader import Grader\n\n__all__=[\n'StdoutCollector',\n'Grader',\n]\n", ["gradepad.grader", "gradepad.stdout_collector"], 1], "gradepad.stdout_collector": [".py", "import sys\n\n\nclass StdoutCollector:\n def __init__(self):\n  self.data_list=[]\n  \n def __enter__(self):\n  self.stdoutbak=sys.stdout\n  sys.stdout=self\n  return self\n  \n def __exit__(self,*args):\n  sys.stdout=self.stdoutbak\n  \n def write(self,data=''):\n  self.data_list.append(str(data))\n  \n def flush(self):\n  pass\n  \n def get_output(self):\n  return ''.join(self.data_list)\n", ["sys"]]}
__BRYTHON__.update_VFS(scripts)
